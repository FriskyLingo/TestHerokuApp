/**
 *
 *  Demonstration for the unofficial_nest library
 *  logs in, reads status, constantly, for ever. :)
 *
 */

"option strict";
var util = require('util'),
    nest = require('../index.js');  // normally would be 'unofficial-nest-api'


function trimQuotes(s) {
    if (!s || s.length === 0) {
        return '';
    }
    var c = s.charAt(0);
    var start = (c === '\'' || c === '"') ? 1 : 0;
    var end = s.length;
    c = s.charAt(end - 1);
    end -= (c === '\'' || c === '"') ? 1 : 0;
    return s.substring(start, end);
}

function merge(o1, o2) {
    o1 = o1 || {};
    if (!o2) {
        return o1;
    }
    for (var p in o2) {
        o1[p] = o2[p];
    }
    return o1;
}

// if (process.argv.length < 4) {
//     if (process.argv.length < 2) {
//     console.log('Usage: ' + process.argv[1] + ' USERNAME PASSWORD [OPTIONS]');
//     console.log('');
//     console.log('USERNAME and PASSWORD should be enclosed in quotes.');
//     console.log('');

//     process.exit(1); // failure to communicate with user app requirements. :)
// }

//function loginToNest() {
    /*********************************************************************************************
    Set username and password
    *********************************************************************************************/
    var username = 'krobbins@americandatanetwork.com';
    var password = 'Accord08%';


    /*********************************************************************************************
    Log the current humidity value to the console
    *********************************************************************************************/
    //getCurrentHumidity();


    /*********************************************************************************************
    Fetch the thermostat's data
    *********************************************************************************************/
    //Make sure username and password are set first
    if (username && password) {
        //Get rid of any quotes in the username and password
        username = trimQuotes(username);
        password = trimQuotes(password);

        // alert(nest);

        //Login to the Nest account
        nest.login(username, password, function (err, data) {
            // //If an error occurs...
            // if (err) {
            //     //Log the error message to the console and exit
            //     //console.log(err.message);
            //     alert(err.message);
            //     process.exit(1);
            //     return;
            // }

            //Log to the console that the user has successfully logged in
            console.log('Logged in.');
            //alert("Logged in.");

            //Get the information for the specified Nest account
            nest.fetchStatus(function (data) {
                ////Write out the returned JSON object to the console
                //console.log(data);

                //return data;

                //Loop through each Nest thermostat the user has
                for (var deviceId in data.device) {
                    //Make sure the "device" object has a "deviceId" property before using it
                    if (data.device.hasOwnProperty(deviceId)) {
                        // //Create an object for the current thermostat
                        // var sharedDevice = data.shared[deviceId];

                        // //Log device information to the console
                        // console.log(util.format("%s [%s], Current temperature = %d F target=%d",
                        //     sharedDevice.name,
                        //     deviceId,
                        //     nest.ctof(sharedDevice.current_temperature),
                        //     nest.ctof(sharedDevice.target_temperature)));


                        //Create an object for the current thermostat
                        var device = data.device[deviceId];
                        globalDevice = device;

                        //Log device information to the console
                        console.log(util.format("CURRENT HUMIDITY = %d",
                            device.current_humidity));
                    }
                }

                //var ids = nest.getDeviceIds();
                //var strucIds = nest.getStructureIds();
                //nest.setTemperature(ids[0], 70);
                //nest.setTemperature(70);
                //nest.setFanModeAuto();
                //subscribe();
                //nest.setAway();
                //nest.setHome();
                //nest.setTargetTemperatureType(ids[0], 'heat');
            });
        });
    }
//}

function subscribe() {
    // nest.subscribe(subscribeDone, ['shared', 'energy_latest']);
    nest.subscribe(subscribeDone, ['shared', 'device']);
}

function subscribeDone(deviceId, data, type) {
    // data if set, is also stored here: nest.lastStatus.shared[thermostatID]
    if (deviceId) {
        //console.log('Device: ' + deviceId + " type: " + type);
        //console.log(JSON.stringify(data));
        console.log(util.format("CURRENT HUMIDITY = %d",
            globalDevice.current_humidity));
    } else {
        console.log('No data');

    }
    setTimeout(subscribe, 2000);
}


function getCurrentHumidity() {
    // //Get the information for the specified Nest account
    // nest.fetchStatus(function (data) {
    //     ////Write out the returned JSON object to the console
    //     //console.log(data);

    //     //return data;

    //     //Loop through each Nest thermostat the user has
    //     for (var deviceId in data.device) {
    //         //Make sure the "device" object has a "deviceId" property before using it
    //         if (data.device.hasOwnProperty(deviceId)) {
    //             //Create an object for the current thermostat
    //             var device = data.device[deviceId];
    //             globalDevice = device;

    //             // //Log device information to the console
    //             // console.log(util.format("CURRENT HUMIDITY = %d",
    //             //     device.current_humidity));

    //             alert(device.current_humidity);
    //             //return device.current_humidity;
    //         }
    //     }
    // });
}